//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the ueye_cam package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __ueye_cam__UEYECAMCONFIG_H__
#define __ueye_cam__UEYECAMCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace ueye_cam
{
  class UEyeCamConfigStatics;

  class UEyeCamConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(UEyeCamConfig &config, const UEyeCamConfig &max, const UEyeCamConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const UEyeCamConfig &config1, const UEyeCamConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, UEyeCamConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const UEyeCamConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, UEyeCamConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const UEyeCamConfig &config) const = 0;
      virtual void getValue(const UEyeCamConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T UEyeCamConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (UEyeCamConfig::* field);

      virtual void clamp(UEyeCamConfig &config, const UEyeCamConfig &max, const UEyeCamConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const UEyeCamConfig &config1, const UEyeCamConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, UEyeCamConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const UEyeCamConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, UEyeCamConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const UEyeCamConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const UEyeCamConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, UEyeCamConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, UEyeCamConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<UEyeCamConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(UEyeCamConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("image_width"==(*_i)->name){image_width = boost::any_cast<int>(val);}
        if("image_height"==(*_i)->name){image_height = boost::any_cast<int>(val);}
        if("image_left"==(*_i)->name){image_left = boost::any_cast<int>(val);}
        if("image_top"==(*_i)->name){image_top = boost::any_cast<int>(val);}
        if("color_mode"==(*_i)->name){color_mode = boost::any_cast<std::string>(val);}
        if("subsampling"==(*_i)->name){subsampling = boost::any_cast<int>(val);}
        if("binning"==(*_i)->name){binning = boost::any_cast<int>(val);}
        if("sensor_scaling"==(*_i)->name){sensor_scaling = boost::any_cast<double>(val);}
        if("auto_gain"==(*_i)->name){auto_gain = boost::any_cast<bool>(val);}
        if("master_gain"==(*_i)->name){master_gain = boost::any_cast<int>(val);}
        if("red_gain"==(*_i)->name){red_gain = boost::any_cast<int>(val);}
        if("green_gain"==(*_i)->name){green_gain = boost::any_cast<int>(val);}
        if("blue_gain"==(*_i)->name){blue_gain = boost::any_cast<int>(val);}
        if("gain_boost"==(*_i)->name){gain_boost = boost::any_cast<bool>(val);}
        if("auto_exposure"==(*_i)->name){auto_exposure = boost::any_cast<bool>(val);}
        if("exposure"==(*_i)->name){exposure = boost::any_cast<double>(val);}
        if("auto_white_balance"==(*_i)->name){auto_white_balance = boost::any_cast<bool>(val);}
        if("white_balance_red_offset"==(*_i)->name){white_balance_red_offset = boost::any_cast<int>(val);}
        if("white_balance_blue_offset"==(*_i)->name){white_balance_blue_offset = boost::any_cast<int>(val);}
        if("flash_delay"==(*_i)->name){flash_delay = boost::any_cast<int>(val);}
        if("flash_duration"==(*_i)->name){flash_duration = boost::any_cast<int>(val);}
        if("ext_trigger_mode"==(*_i)->name){ext_trigger_mode = boost::any_cast<bool>(val);}
        if("auto_frame_rate"==(*_i)->name){auto_frame_rate = boost::any_cast<bool>(val);}
        if("frame_rate"==(*_i)->name){frame_rate = boost::any_cast<double>(val);}
        if("output_rate"==(*_i)->name){output_rate = boost::any_cast<double>(val);}
        if("pixel_clock"==(*_i)->name){pixel_clock = boost::any_cast<int>(val);}
        if("flip_upd"==(*_i)->name){flip_upd = boost::any_cast<bool>(val);}
        if("flip_lr"==(*_i)->name){flip_lr = boost::any_cast<bool>(val);}
      }
    }

    int image_width;
int image_height;
int image_left;
int image_top;
std::string color_mode;
int subsampling;
int binning;
double sensor_scaling;
bool auto_gain;
int master_gain;
int red_gain;
int green_gain;
int blue_gain;
bool gain_boost;
bool auto_exposure;
double exposure;
bool auto_white_balance;
int white_balance_red_offset;
int white_balance_blue_offset;
int flash_delay;
int flash_duration;
bool ext_trigger_mode;
bool auto_frame_rate;
double frame_rate;
double output_rate;
int pixel_clock;
bool flip_upd;
bool flip_lr;

    bool state;
    std::string name;

    
}groups;



//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int image_width;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int image_height;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int image_left;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int image_top;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string color_mode;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int subsampling;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int binning;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double sensor_scaling;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool auto_gain;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int master_gain;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int red_gain;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int green_gain;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int blue_gain;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool gain_boost;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool auto_exposure;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double exposure;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool auto_white_balance;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int white_balance_red_offset;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int white_balance_blue_offset;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int flash_delay;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int flash_duration;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool ext_trigger_mode;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool auto_frame_rate;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double frame_rate;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double output_rate;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int pixel_clock;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool flip_upd;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool flip_lr;
//#line 218 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("UEyeCamConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const UEyeCamConfig &__max__ = __getMax__();
      const UEyeCamConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const UEyeCamConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const UEyeCamConfig &__getDefault__();
    static const UEyeCamConfig &__getMax__();
    static const UEyeCamConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const UEyeCamConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void UEyeCamConfig::ParamDescription<std::string>::clamp(UEyeCamConfig &config, const UEyeCamConfig &max, const UEyeCamConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class UEyeCamConfigStatics
  {
    friend class UEyeCamConfig;

    UEyeCamConfigStatics()
    {
UEyeCamConfig::GroupDescription<UEyeCamConfig::DEFAULT, UEyeCamConfig> Default("Default", "", 0, 0, true, &UEyeCamConfig::groups);
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.image_width = 16;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.image_width = 4912;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.image_width = 640;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("image_width", "int", 1, "Width of camera's area of interest (prior to subsampling, binning, or sensor scaling)", "", &UEyeCamConfig::image_width)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("image_width", "int", 1, "Width of camera's area of interest (prior to subsampling, binning, or sensor scaling)", "", &UEyeCamConfig::image_width)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.image_height = 4;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.image_height = 3684;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.image_height = 480;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("image_height", "int", 1, "Height of camera's area of interest (prior to subsampling, binning, or sensor scaling)", "", &UEyeCamConfig::image_height)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("image_height", "int", 1, "Height of camera's area of interest (prior to subsampling, binning, or sensor scaling)", "", &UEyeCamConfig::image_height)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.image_left = -1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.image_left = 2544;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.image_left = -1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("image_left", "int", 1, "Left index for camera's area of interest (-1: center)", "", &UEyeCamConfig::image_left)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("image_left", "int", 1, "Left index for camera's area of interest (-1: center)", "", &UEyeCamConfig::image_left)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.image_top = -1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.image_top = 1916;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.image_top = -1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("image_top", "int", 1, "Top index for camera's area of interest (-1: center)", "", &UEyeCamConfig::image_top)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("image_top", "int", 1, "Top index for camera's area of interest (-1: center)", "", &UEyeCamConfig::image_top)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_mode = "";
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_mode = "";
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_mode = "mono8";
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<std::string>("color_mode", "str", 1, "Output image color mode", "{'enum_description': 'Color mode values', 'enum': [{'srcline': 22, 'description': '8-bit Monochrome', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'mono8', 'ctype': 'std::string', 'type': 'str', 'name': 'MONO8'}, {'srcline': 23, 'description': '10-bit Monochrome', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'mono10', 'ctype': 'std::string', 'type': 'str', 'name': 'MONO10'}, {'srcline': 24, 'description': '12-bit Monochrome', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'mono12', 'ctype': 'std::string', 'type': 'str', 'name': 'MONO12'}, {'srcline': 25, 'description': '16-bit Monochrome', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'mono16', 'ctype': 'std::string', 'type': 'str', 'name': 'MONO16'}, {'srcline': 26, 'description': '24-bit Red/Green/Blue', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'rgb8', 'ctype': 'std::string', 'type': 'str', 'name': 'RGB8'}, {'srcline': 27, 'description': '32-bit packed Red/Green/Blue', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'rgb10', 'ctype': 'std::string', 'type': 'str', 'name': 'RGB10'}, {'srcline': 28, 'description': '48-bit unpacked Red/Green/Blue', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'rgb10u', 'ctype': 'std::string', 'type': 'str', 'name': 'RGB10u'}, {'srcline': 29, 'description': '48-bit unpacked Red/Green/Blue', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'rgb12u', 'ctype': 'std::string', 'type': 'str', 'name': 'RGB12u'}, {'srcline': 30, 'description': '24-bit Blue/Green/Red', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'bgr8', 'ctype': 'std::string', 'type': 'str', 'name': 'BGR8'}, {'srcline': 31, 'description': '32-bit packed Blue/Green/Red', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'bgr10', 'ctype': 'std::string', 'type': 'str', 'name': 'BGR10'}, {'srcline': 32, 'description': '48-bit unpacked Blue/Green/Red', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'bgr10u', 'ctype': 'std::string', 'type': 'str', 'name': 'BGR10u'}, {'srcline': 33, 'description': '48-bit unpacked Blue/Green/Red', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'bgr12u', 'ctype': 'std::string', 'type': 'str', 'name': 'BGR12u'}, {'srcline': 34, 'description': '8-bit Raw Bayer (RGGB)', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'bayer_rggb8', 'ctype': 'std::string', 'type': 'str', 'name': 'BAYER_RGGB8'}]}", &UEyeCamConfig::color_mode)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<std::string>("color_mode", "str", 1, "Output image color mode", "{'enum_description': 'Color mode values', 'enum': [{'srcline': 22, 'description': '8-bit Monochrome', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'mono8', 'ctype': 'std::string', 'type': 'str', 'name': 'MONO8'}, {'srcline': 23, 'description': '10-bit Monochrome', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'mono10', 'ctype': 'std::string', 'type': 'str', 'name': 'MONO10'}, {'srcline': 24, 'description': '12-bit Monochrome', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'mono12', 'ctype': 'std::string', 'type': 'str', 'name': 'MONO12'}, {'srcline': 25, 'description': '16-bit Monochrome', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'mono16', 'ctype': 'std::string', 'type': 'str', 'name': 'MONO16'}, {'srcline': 26, 'description': '24-bit Red/Green/Blue', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'rgb8', 'ctype': 'std::string', 'type': 'str', 'name': 'RGB8'}, {'srcline': 27, 'description': '32-bit packed Red/Green/Blue', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'rgb10', 'ctype': 'std::string', 'type': 'str', 'name': 'RGB10'}, {'srcline': 28, 'description': '48-bit unpacked Red/Green/Blue', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'rgb10u', 'ctype': 'std::string', 'type': 'str', 'name': 'RGB10u'}, {'srcline': 29, 'description': '48-bit unpacked Red/Green/Blue', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'rgb12u', 'ctype': 'std::string', 'type': 'str', 'name': 'RGB12u'}, {'srcline': 30, 'description': '24-bit Blue/Green/Red', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'bgr8', 'ctype': 'std::string', 'type': 'str', 'name': 'BGR8'}, {'srcline': 31, 'description': '32-bit packed Blue/Green/Red', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'bgr10', 'ctype': 'std::string', 'type': 'str', 'name': 'BGR10'}, {'srcline': 32, 'description': '48-bit unpacked Blue/Green/Red', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'bgr10u', 'ctype': 'std::string', 'type': 'str', 'name': 'BGR10u'}, {'srcline': 33, 'description': '48-bit unpacked Blue/Green/Red', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'bgr12u', 'ctype': 'std::string', 'type': 'str', 'name': 'BGR12u'}, {'srcline': 34, 'description': '8-bit Raw Bayer (RGGB)', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const char * const', 'value': 'bayer_rggb8', 'ctype': 'std::string', 'type': 'str', 'name': 'BAYER_RGGB8'}]}", &UEyeCamConfig::color_mode)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.subsampling = -2147483648;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.subsampling = 2147483647;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.subsampling = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("subsampling", "int", 1, "Output image subsampling ratio", "{'enum_description': 'Subsampling Values', 'enum': [{'srcline': 40, 'description': '1X Subsampling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SUB_1X'}, {'srcline': 41, 'description': '2X Subsampling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'SUB_2X'}, {'srcline': 42, 'description': '4X Subsampling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'SUB_4X'}, {'srcline': 43, 'description': '8X Subsampling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'SUB_8X'}, {'srcline': 44, 'description': '16X Subsampling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 16, 'ctype': 'int', 'type': 'int', 'name': 'SUB_16X'}]}", &UEyeCamConfig::subsampling)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("subsampling", "int", 1, "Output image subsampling ratio", "{'enum_description': 'Subsampling Values', 'enum': [{'srcline': 40, 'description': '1X Subsampling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SUB_1X'}, {'srcline': 41, 'description': '2X Subsampling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'SUB_2X'}, {'srcline': 42, 'description': '4X Subsampling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'SUB_4X'}, {'srcline': 43, 'description': '8X Subsampling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'SUB_8X'}, {'srcline': 44, 'description': '16X Subsampling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 16, 'ctype': 'int', 'type': 'int', 'name': 'SUB_16X'}]}", &UEyeCamConfig::subsampling)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.binning = -2147483648;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.binning = 2147483647;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.binning = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("binning", "int", 1, "Output image binning ratio", "{'enum_description': 'Binning Values', 'enum': [{'srcline': 50, 'description': '1X Binning', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'BIN_1X'}, {'srcline': 51, 'description': '2X Binning', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'BIN_2X'}, {'srcline': 52, 'description': '4X Binning', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'BIN_4X'}, {'srcline': 53, 'description': '8X Binning', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'BIN_8X'}, {'srcline': 54, 'description': '16X Binning', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 16, 'ctype': 'int', 'type': 'int', 'name': 'BIN_16X'}]}", &UEyeCamConfig::binning)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("binning", "int", 1, "Output image binning ratio", "{'enum_description': 'Binning Values', 'enum': [{'srcline': 50, 'description': '1X Binning', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'BIN_1X'}, {'srcline': 51, 'description': '2X Binning', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'BIN_2X'}, {'srcline': 52, 'description': '4X Binning', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'BIN_4X'}, {'srcline': 53, 'description': '8X Binning', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'BIN_8X'}, {'srcline': 54, 'description': '16X Binning', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const int', 'value': 16, 'ctype': 'int', 'type': 'int', 'name': 'BIN_16X'}]}", &UEyeCamConfig::binning)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sensor_scaling = -std::numeric_limits<double>::infinity();
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sensor_scaling = std::numeric_limits<double>::infinity();
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sensor_scaling = 1.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<double>("sensor_scaling", "double", 1, "Output image scaling ratio (Internal Image Scaling)", "{'enum_description': 'Internal Image Scaling Values', 'enum': [{'srcline': 60, 'description': '1X Internal Image Scaling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const double', 'value': 1.0, 'ctype': 'double', 'type': 'double', 'name': 'SS_1X'}, {'srcline': 61, 'description': '2X Internal Image Scaling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const double', 'value': 2.0, 'ctype': 'double', 'type': 'double', 'name': 'SS_2X'}, {'srcline': 62, 'description': '4X Internal Image Scaling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const double', 'value': 4.0, 'ctype': 'double', 'type': 'double', 'name': 'SS_4X'}, {'srcline': 63, 'description': '8X Internal Image Scaling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const double', 'value': 8.0, 'ctype': 'double', 'type': 'double', 'name': 'SS_8X'}, {'srcline': 64, 'description': '16X Internal Image Scaling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const double', 'value': 16.0, 'ctype': 'double', 'type': 'double', 'name': 'SS_16X'}]}", &UEyeCamConfig::sensor_scaling)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<double>("sensor_scaling", "double", 1, "Output image scaling ratio (Internal Image Scaling)", "{'enum_description': 'Internal Image Scaling Values', 'enum': [{'srcline': 60, 'description': '1X Internal Image Scaling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const double', 'value': 1.0, 'ctype': 'double', 'type': 'double', 'name': 'SS_1X'}, {'srcline': 61, 'description': '2X Internal Image Scaling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const double', 'value': 2.0, 'ctype': 'double', 'type': 'double', 'name': 'SS_2X'}, {'srcline': 62, 'description': '4X Internal Image Scaling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const double', 'value': 4.0, 'ctype': 'double', 'type': 'double', 'name': 'SS_4X'}, {'srcline': 63, 'description': '8X Internal Image Scaling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const double', 'value': 8.0, 'ctype': 'double', 'type': 'double', 'name': 'SS_8X'}, {'srcline': 64, 'description': '16X Internal Image Scaling', 'srcfile': '/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg', 'cconsttype': 'const double', 'value': 16.0, 'ctype': 'double', 'type': 'double', 'name': 'SS_16X'}]}", &UEyeCamConfig::sensor_scaling)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_gain = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_gain = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_gain = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<bool>("auto_gain", "bool", 0, "Auto gain (overruled by auto framerate)", "", &UEyeCamConfig::auto_gain)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<bool>("auto_gain", "bool", 0, "Auto gain (overruled by auto framerate)", "", &UEyeCamConfig::auto_gain)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.master_gain = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.master_gain = 100;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.master_gain = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("master_gain", "int", 0, "Master gain percentage", "", &UEyeCamConfig::master_gain)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("master_gain", "int", 0, "Master gain percentage", "", &UEyeCamConfig::master_gain)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.red_gain = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.red_gain = 100;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.red_gain = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("red_gain", "int", 0, "Gain percentage for red channel", "", &UEyeCamConfig::red_gain)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("red_gain", "int", 0, "Gain percentage for red channel", "", &UEyeCamConfig::red_gain)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.green_gain = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.green_gain = 100;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.green_gain = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("green_gain", "int", 0, "Gain percentage for green channel", "", &UEyeCamConfig::green_gain)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("green_gain", "int", 0, "Gain percentage for green channel", "", &UEyeCamConfig::green_gain)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.blue_gain = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.blue_gain = 100;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.blue_gain = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("blue_gain", "int", 0, "Gain percentage for blue channel", "", &UEyeCamConfig::blue_gain)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("blue_gain", "int", 0, "Gain percentage for blue channel", "", &UEyeCamConfig::blue_gain)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gain_boost = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gain_boost = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gain_boost = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<bool>("gain_boost", "bool", 0, "Analog gain boost", "", &UEyeCamConfig::gain_boost)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<bool>("gain_boost", "bool", 0, "Analog gain boost", "", &UEyeCamConfig::gain_boost)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_exposure = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_exposure = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_exposure = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<bool>("auto_exposure", "bool", 0, "Auto exposure (a.k.a. auto shutter)", "", &UEyeCamConfig::auto_exposure)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<bool>("auto_exposure", "bool", 0, "Auto exposure (a.k.a. auto shutter)", "", &UEyeCamConfig::auto_exposure)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure = 300.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure = 33.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<double>("exposure", "double", 0, "Exposure value (ms)", "", &UEyeCamConfig::exposure)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<double>("exposure", "double", 0, "Exposure value (ms)", "", &UEyeCamConfig::exposure)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_white_balance = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_white_balance = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_white_balance = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<bool>("auto_white_balance", "bool", 0, "Auto white balance", "", &UEyeCamConfig::auto_white_balance)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<bool>("auto_white_balance", "bool", 0, "Auto white balance", "", &UEyeCamConfig::auto_white_balance)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.white_balance_red_offset = -50;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.white_balance_red_offset = 50;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.white_balance_red_offset = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("white_balance_red_offset", "int", 0, "Red level offset for white balance", "", &UEyeCamConfig::white_balance_red_offset)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("white_balance_red_offset", "int", 0, "Red level offset for white balance", "", &UEyeCamConfig::white_balance_red_offset)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.white_balance_blue_offset = -50;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.white_balance_blue_offset = 50;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.white_balance_blue_offset = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("white_balance_blue_offset", "int", 0, "Blue level offset for white balance", "", &UEyeCamConfig::white_balance_blue_offset)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("white_balance_blue_offset", "int", 0, "Blue level offset for white balance", "", &UEyeCamConfig::white_balance_blue_offset)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.flash_delay = -1000000;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.flash_delay = 1000000;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.flash_delay = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("flash_delay", "int", 0, "Flash output delay (us) [not applicable in external trigger mode]", "", &UEyeCamConfig::flash_delay)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("flash_delay", "int", 0, "Flash output delay (us) [not applicable in external trigger mode]", "", &UEyeCamConfig::flash_delay)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.flash_duration = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.flash_duration = 1000000;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.flash_duration = 1000;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("flash_duration", "int", 0, "Flash output duration (us) (0: set to exposure duration) [not applicable in external trigger mode]", "", &UEyeCamConfig::flash_duration)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("flash_duration", "int", 0, "Flash output duration (us) (0: set to exposure duration) [not applicable in external trigger mode]", "", &UEyeCamConfig::flash_duration)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ext_trigger_mode = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ext_trigger_mode = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ext_trigger_mode = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<bool>("ext_trigger_mode", "bool", 1, "Toggle between external trigger mode and free-run mode", "", &UEyeCamConfig::ext_trigger_mode)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<bool>("ext_trigger_mode", "bool", 1, "Toggle between external trigger mode and free-run mode", "", &UEyeCamConfig::ext_trigger_mode)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_frame_rate = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_frame_rate = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_frame_rate = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<bool>("auto_frame_rate", "bool", 0, "Auto frame rate (requires auto exposure, supercedes auto gain) [not applicable in external trigger mode]", "", &UEyeCamConfig::auto_frame_rate)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<bool>("auto_frame_rate", "bool", 0, "Auto frame rate (requires auto exposure, supercedes auto gain) [not applicable in external trigger mode]", "", &UEyeCamConfig::auto_frame_rate)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.frame_rate = 0.01;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.frame_rate = 200.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.frame_rate = 10.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<double>("frame_rate", "double", 0, "Frame process rate (Hz) [not applicable in external trigger mode]", "", &UEyeCamConfig::frame_rate)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<double>("frame_rate", "double", 0, "Frame process rate (Hz) [not applicable in external trigger mode]", "", &UEyeCamConfig::frame_rate)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.output_rate = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.output_rate = 200.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.output_rate = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<double>("output_rate", "double", 0, "Frame publish rate (Hz) (0: publish all processed frames) [not applicable in external trigger mode]", "", &UEyeCamConfig::output_rate)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<double>("output_rate", "double", 0, "Frame publish rate (Hz) (0: publish all processed frames) [not applicable in external trigger mode]", "", &UEyeCamConfig::output_rate)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.pixel_clock = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.pixel_clock = 500;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.pixel_clock = 25;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("pixel_clock", "int", 0, "Pixel clock (MHz)", "", &UEyeCamConfig::pixel_clock)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<int>("pixel_clock", "int", 0, "Pixel clock (MHz)", "", &UEyeCamConfig::pixel_clock)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.flip_upd = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.flip_upd = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.flip_upd = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<bool>("flip_upd", "bool", 0, "Mirror Upside Down", "", &UEyeCamConfig::flip_upd)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<bool>("flip_upd", "bool", 0, "Mirror Upside Down", "", &UEyeCamConfig::flip_upd)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.flip_lr = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.flip_lr = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.flip_lr = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<bool>("flip_lr", "bool", 0, "Mirror Left Right", "", &UEyeCamConfig::flip_lr)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(UEyeCamConfig::AbstractParamDescriptionConstPtr(new UEyeCamConfig::ParamDescription<bool>("flip_lr", "bool", 0, "Mirror Left Right", "", &UEyeCamConfig::flip_lr)));
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(UEyeCamConfig::AbstractGroupDescriptionConstPtr(new UEyeCamConfig::GroupDescription<UEyeCamConfig::DEFAULT, UEyeCamConfig>(Default)));
//#line 356 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<UEyeCamConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<UEyeCamConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<UEyeCamConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    UEyeCamConfig __max__;
    UEyeCamConfig __min__;
    UEyeCamConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const UEyeCamConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static UEyeCamConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &UEyeCamConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const UEyeCamConfig &UEyeCamConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const UEyeCamConfig &UEyeCamConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const UEyeCamConfig &UEyeCamConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<UEyeCamConfig::AbstractParamDescriptionConstPtr> &UEyeCamConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<UEyeCamConfig::AbstractGroupDescriptionConstPtr> &UEyeCamConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const UEyeCamConfigStatics *UEyeCamConfig::__get_statics__()
  {
    const static UEyeCamConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = UEyeCamConfigStatics::get_instance();

    return statics;
  }

//#line 22 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const char * const UEyeCam_MONO8 = "mono8";
//#line 23 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const char * const UEyeCam_MONO10 = "mono10";
//#line 24 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const char * const UEyeCam_MONO12 = "mono12";
//#line 25 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const char * const UEyeCam_MONO16 = "mono16";
//#line 26 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const char * const UEyeCam_RGB8 = "rgb8";
//#line 27 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const char * const UEyeCam_RGB10 = "rgb10";
//#line 28 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const char * const UEyeCam_RGB10u = "rgb10u";
//#line 29 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const char * const UEyeCam_RGB12u = "rgb12u";
//#line 30 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const char * const UEyeCam_BGR8 = "bgr8";
//#line 31 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const char * const UEyeCam_BGR10 = "bgr10";
//#line 32 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const char * const UEyeCam_BGR10u = "bgr10u";
//#line 33 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const char * const UEyeCam_BGR12u = "bgr12u";
//#line 34 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const char * const UEyeCam_BAYER_RGGB8 = "bayer_rggb8";
//#line 40 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const int UEyeCam_SUB_1X = 1;
//#line 41 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const int UEyeCam_SUB_2X = 2;
//#line 42 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const int UEyeCam_SUB_4X = 4;
//#line 43 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const int UEyeCam_SUB_8X = 8;
//#line 44 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const int UEyeCam_SUB_16X = 16;
//#line 50 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const int UEyeCam_BIN_1X = 1;
//#line 51 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const int UEyeCam_BIN_2X = 2;
//#line 52 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const int UEyeCam_BIN_4X = 4;
//#line 53 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const int UEyeCam_BIN_8X = 8;
//#line 54 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const int UEyeCam_BIN_16X = 16;
//#line 60 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const double UEyeCam_SS_1X = 1.0;
//#line 61 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const double UEyeCam_SS_2X = 2.0;
//#line 62 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const double UEyeCam_SS_4X = 4.0;
//#line 63 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const double UEyeCam_SS_8X = 8.0;
//#line 64 "/home/saas/studious-guacamole/src/ueye_cam/cfg/UEyeCam.cfg"
      const double UEyeCam_SS_16X = 16.0;
}

#endif // __UEYECAMRECONFIGURATOR_H__
